// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MASTER
}

enum ScheduleStatus {
  FREE
  BOOKED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Contact {
  id     String @id @default(uuid())
  name   String
  value  String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  role          UserRole        @default(USER)
  contact       Contact[]
  master        Master?
  bookings      Booking[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Master {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profession String?
  bio        String?

  schedules Schedule[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        String         @id @default(uuid())
  masterId  String
  master    Master         @relation(fields: [masterId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    ScheduleStatus @default(FREE)
  booking   Booking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id         String         @id @default(uuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  scheduleId String         @unique
  schedule   Schedule       @relation(fields: [scheduleId], references: [id])
  masterId   String
  master     Master         @relation(fields: [masterId], references: [id], onDelete: Cascade)
  status     BookingStatus? @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
